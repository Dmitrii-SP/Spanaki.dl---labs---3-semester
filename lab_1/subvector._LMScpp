bool init(subvector *qv) {
    qv->capacity = 0;
    qv->top = 0;
    qv->mas = nullptr;
    return true;
}

bool resize(subvector *qv, unsigned int new_capacity); 

bool push_back(subvector *qv, int d) {
    if (!(qv->top < qv->capacity)) {
        const unsigned int new_cap = (qv->capacity == 0) ? 1 : (qv->capacity * 2); 
        
        if (!resize(qv, new_cap)) {
            return false;
        }
    }
    
    qv->mas[qv->top++] = d;
    
    return true;
}

int pop_back(subvector *qv) {
    return (qv->top == 0) ? 0 : qv->mas[--qv->top]; 
}

bool resize(subvector *qv, unsigned int new_capacity) {
    if (new_capacity == qv->capacity) return true;

    if (new_capacity == 0) {
        delete[] qv->mas;
        qv->mas = nullptr;
        qv->capacity = qv->top = 0;
        return true;
    }
    
    int *temporary_storage = new int[new_capacity];
    if (temporary_storage == nullptr) {
        return false;
    }
    
    unsigned int limit = (qv->top < new_capacity) ? qv->top : new_capacity;

    for (unsigned int i = 0; i < limit; ++i) {
        temporary_storage[i] = qv->mas[i];
    }
    
    delete[] qv->mas;
    qv->mas = temporary_storage;
    qv->capacity = new_capacity;
    qv->top = limit; 
    
    return true;
}

void shrink_to_fit(subvector *qv) {
    if (qv->top >= qv->capacity) {
        return;
    }

    if (qv->top == 0) {
        delete[] qv->mas;
        qv->mas = nullptr;
        qv->capacity = 0;
        return;
    }
    
    int *temp_mas = new int[qv->top];
    
    if (temp_mas != nullptr) {
        unsigned int current_index = 0;
        while (current_index < qv->top) {
            temp_mas[current_index] = qv->mas[current_index];
            current_index++;
        }

        delete[] qv->mas;
        qv->mas = temp_mas;
        qv->capacity = qv->top;
    }
}

void clear(subvector *qv) {
    qv->top = (qv->top > 0) ? qv->top - qv->top : 0; 
}

void destructor(subvector *qv) {
    if (qv->mas) {
        delete[] qv->mas;
    }
    qv->mas = nullptr;
    qv->top = 0;
    qv->capacity = 0;
}
